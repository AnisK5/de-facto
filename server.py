# =====================================================
#  DE FACTO - BACKEND D'ANALYSE DE TEXTE
#  Version : 1.4
#  Auteur : Anis + ChatGPT
#  Mission : √âvaluer la fiabilit√© et la rigueur argumentative d‚Äôun texte.
# =====================================================

from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from datetime import datetime
import os, json, re

# ----------------------------
# 1Ô∏è‚É£ INITIALISATION DU SERVEUR
# ----------------------------

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


# ----------------------------
# 2Ô∏è‚É£ PAGE D‚ÄôACCUEIL
# ----------------------------
@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "message": "Bienvenue sur l‚ÄôAPI De Facto.",
        "routes": ["/analyze (POST)"],
        "description": "Envoyez un texte pour obtenir une analyse compl√®te et transparente."
    })


# ----------------------------
# 3Ô∏è‚É£ FONCTION PRINCIPALE : /analyze
# ----------------------------
@app.route("/analyze", methods=["POST", "OPTIONS"])
def analyze():
    if request.method == "OPTIONS":
        return ("", 204)

    # Lecture du texte envoy√© par le frontend
    data = request.get_json(force=True)
    text = data.get("text", "").strip()

    if not text:
        return jsonify({"error": "Aucun texte re√ßu."}), 400

    word_count = len(text.split())
    if word_count < 50:
        return jsonify({"error": "Texte trop court pour une analyse fiable (min. 50 mots)."}), 400


    # ----------------------------
    # 4Ô∏è‚É£ PROMPT GPT
    # ----------------------------
    prompt = f"""
    Tu es le moteur d'analyse de DE FACTO, un outil de fiabilit√© des textes.
    Ta mission : √©valuer la rigueur argumentative d‚Äôun texte informatif selon une m√©thode claire et reproductible.

    üß≠ D√âFINITION M√âTHODOLOGIQUE :
    - FOND :
        ‚Ä¢ Justesse : pr√©cision des faits, qualit√© des sources cit√©es, coh√©rence interne.
        ‚Ä¢ Compl√©tude : diversit√© des points de vue, mention de contre-arguments, ouverture √† la nuance.
    - FORME :
        ‚Ä¢ Ton : neutralit√© du vocabulaire, absence de charge √©motionnelle.
        ‚Ä¢ Biais : d√©tection des sophismes, g√©n√©ralisations ou appels √† l‚Äô√©motion.

    üß± CONSIGNES :
    - Si le texte n‚Äôest pas informatif (opinion, fiction, humour...), indique-le clairement dans "type_texte".
    - Donne une note de 0 √† 1 pour chaque sous-crit√®re.
    - Ajoute pour chacun : une courte justification, 1‚Äì3 exemples du texte ("preuves"), et un ou deux points d'am√©lioration ("elements_manquants").
    - Calcule un score global pond√©r√© : 70 % fond, 30 % forme.
    - Attribue une couleur selon la grille suivante :
        üü¢ ‚â• 70
        üü° 40‚Äì69
        üî¥ < 40
    - Indique un niveau de confiance (0 √† 1) bas√© sur la clart√© et la longueur du texte.
    - Fournis :
        - une impression g√©n√©rale,
        - un conseil de lecture,
        - les limites du texte,
        - les limites de ton analyse,
        - les v√©rifications sugg√©r√©es,
        - et un r√©sum√© des crit√®res appliqu√©s.
    - Ajoute une section "methode" explicitant les crit√®res d‚Äôanalyse.

    üìä FORMAT JSON STRICT :
    {{
      "pertinence": "<texte>",
      "type_texte": "<informatif | opinion | fiction | autre>",
      "confiance": <float>,
      "score_global": <float>,
      "couleur": "<üü¢ | üü° | üî¥>",
      "axes": {{
        "fond": {{
          "justesse": {{
            "note": <float>,
            "couleur": "<üü¢ | üü° | üî¥>",
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."],
            "elements_manquants": ["<texte>", "..."]
          }},
          "completuede": {{
            "note": <float>,
            "couleur": "<üü¢ | üü° | üî¥>",
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."],
            "elements_manquants": ["<texte>", "..."]
          }}
        }},
        "forme": {{
          "ton": {{
            "note": <float>,
            "couleur": "<üü¢ | üü° | üî¥>",
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."]
          }},
          "biais": {{
            "note": <float>,
            "couleur": "<üü¢ | üü° | üî¥>",
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."]
          }}
        }}
      }},
      "commentaire": "<texte>",
      "synthese": "<phrase courte>",
      "impression_generale": "<phrase courte>",
      "conseil": "<recommandation>",
      "resume_criteres": ["<phrase>", "..."],
      "verifications_suggerees": ["<√©l√©ment √† v√©rifier>", "..."],
      "limites_texte": ["<texte>", "..."],
      "limites_analyse": ["<texte>", "..."],
      "methode": {{
        "principe": "De Facto √©value la rigueur argumentative d‚Äôun texte selon deux axes : le fond et la forme.",
        "criteres": {{
          "justesse": "V√©rifie la pr√©cision des faits et la pr√©sence de sources identifiables.",
          "completuede": "Mesure la diversit√© des points de vue et la prise en compte des contre-arguments.",
          "ton": "Analyse la neutralit√© du vocabulaire et la charge √©motionnelle.",
          "biais": "D√©tecte les sophismes et g√©n√©ralisations abusives."
        }},
        "avertissement": "L‚Äôanalyse porte sur le texte fourni, pas sur la r√©putation du m√©dia ou de l‚Äôauteur."
      }}
    }}

    Texte √† analyser :
    ---
    {text}
    ---
    """

    # ----------------------------
    # 5Ô∏è‚É£ APPEL √Ä GPT
    # ----------------------------
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es le moteur d‚Äôanalyse structur√© et transparent de De Facto."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )

        raw_output = response.choices[0].message.content.strip()

        # ----------------------------
        # 6Ô∏è‚É£ PARSING DU JSON
        # ----------------------------
        try:
            result = json.loads(raw_output)
        except json.JSONDecodeError:
            match = re.search(r"\{.*\}", raw_output, re.DOTALL)
            result = json.loads(match.group(0)) if match else {"error": "JSON invalide"}

        # ----------------------------
        # 7Ô∏è‚É£ CALCUL LOCAL + COULEURS
        # ----------------------------
        def couleur_note(note):
            if note is None: return "‚ö™"
            if note >= 0.7: return "üü¢"
            elif note >= 0.4: return "üü°"
            else: return "üî¥"

        try:
            fond = result.get("axes", {}).get("fond", {})
            forme = result.get("axes", {}).get("forme", {})

            for axe in [fond, forme]:
                for critere in axe.values():
                    note = critere.get("note", 0)
                    critere["couleur"] = couleur_note(note)

            fond_score = (fond.get("justesse", {}).get("note", 0) + fond.get("completuede", {}).get("note", 0)) / 2
            forme_score = (forme.get("ton", {}).get("note", 0) + forme.get("biais", {}).get("note", 0)) / 2
            score_global = round((fond_score * 0.7 + forme_score * 0.3) * 100, 1)
            result["score_global"] = score_global
            result["couleur"] = couleur_note(score_global / 100)
        except Exception as e:
            print("‚ö†Ô∏è Erreur calcul couleur :", e)

        # ----------------------------
        # 8Ô∏è‚É£ LOGS (sauvegarde locale)
        # ----------------------------
        try:
            log_entry = {
                "timestamp": datetime.utcnow().isoformat(),
                "texte": text[:2000],
                "resultat": result
            }
            with open("logs.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
        except Exception as e:
            print("‚ö†Ô∏è Erreur de log :", e)

        # ----------------------------
        # 9Ô∏è‚É£ R√âPONSE AU FRONT
        # ----------------------------
        return jsonify(result)

    except Exception as e:
        print("‚ùå Erreur GPT :", e)
        return jsonify({"error": str(e)}), 500


# =====================================================
# SYNTH√àSE DU CODE
# =====================================================
# ‚úÖ Re√ßoit un texte (POST /analyze)
# ‚úÖ Analyse fond / forme / justesse / compl√©tude / ton / biais
# ‚úÖ Fournit : commentaires, conseils, limites, m√©thode, suggestions
# ‚úÖ Calcule localement les couleurs et le score global (70/30)
# ‚úÖ Sauvegarde les r√©sultats dans logs.json
# ‚úÖ Renvoie un JSON clair, complet et UX-friendly
# =====================================================
