from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from openai import OpenAI
import os, signal, json, re
from dotenv import load_dotenv

# ---------------------------
# Flask + CORS
# ---------------------------
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}}, supports_credentials=True)

# ---------------------------
# OpenAI client (cl√© en var d'env OPENAI_API_KEY)
# ---------------------------
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ---------------------------
# Timeout (Render)
# ---------------------------
def _timeout_handler(signum, frame):
    raise TimeoutError("Analyse trop longue (timeout Render).")
signal.signal(signal.SIGALRM, _timeout_handler)

# ---------------------------
# Helpers
# ---------------------------
def color_for(score: int) -> str:
    if score is None: return "‚ö™"
    if score >= 70: return "üü¢"
    if score >= 40: return "üü°"
    return "üî¥"

# ---------------------------
# Route principale
# ---------------------------
@app.route("/analyze", methods=["POST", "OPTIONS"])
def analyze():
    if request.method == "OPTIONS":
        return ("", 204)

    payload = request.get_json(silent=True) or {}
    text = (payload.get("text") or "").strip()
    if not text:
        return jsonify({"error": "Aucun texte re√ßu"}), 400

    MAX_LEN = 8000
    texte_tronque = False
    original_length = len(text)
    if original_length > MAX_LEN:
        texte_tronque = True
        text = text[:MAX_LEN] + " [...] (texte tronqu√© pour analyse)"

    # Mode enrichi activ√©
    ENABLE_ENRICHED = True

    # Prompt principal enrichi
    prompt = f"""
Tu es **De Facto**, un barom√®tre d‚Äôanalyse de fiabilit√© des contenus publics.

Ta mission : produire une **analyse vivante, concr√®te et comparative** du texte suivant.
L‚Äôobjectif est d‚Äôaider √† comprendre la fiabilit√© r√©elle, pas seulement √† donner des notes.

---

### üéØ Grille d‚Äô√©valuation
- **FOND**
  ‚Ä¢ Justesse ‚Üí V√©rifie la pr√©cision factuelle, les sources implicites, les affirmations v√©rifiables.  
    ‚Üí Donne un exemple pr√©cis du texte et, si possible, situe-le par rapport √† ce qui est connu publiquement (autres m√©dias, faits r√©cents).  
  ‚Ä¢ Compl√©tude ‚Üí √âvalue la pluralit√© des points de vue, la prise en compte de contre-arguments, la nuance.  
    ‚Üí Identifie clairement ce qui manque.

- **FORME**
  ‚Ä¢ Ton ‚Üí Analyse la neutralit√© lexicale, rep√®re les signaux √©motionnels ou partisans.  
    ‚Üí Donne un exemple de formulation typique.  
  ‚Ä¢ Sophismes ‚Üí D√©tecte les raisonnements fallacieux (g√©n√©ralisations, appels √† l‚Äô√©motion, causalit√©s douteuses).  
    ‚Üí Explique bri√®vement leur effet sur la fiabilit√©.

---

### üîç Contexte simul√©
Si tu connais des faits publics (2024‚Äì2025) li√©s au sujet, tu peux t‚Äôy r√©f√©rer bri√®vement
(ex : ‚Äúselon Le Monde, l‚Äôaffaire concernait‚Ä¶‚Äù, ou ‚Äúd‚Äôautres m√©dias ont rapport√©‚Ä¶‚Äù).  
Tu ne fais PAS de recherche web, tu t‚Äôappuies sur ta m√©moire interne.

---

### üí° Sortie demand√©e
R√©ponds STRICTEMENT en JSON, au format suivant :

{{
  "score_global": <int>,
  "couleur_global": "<emoji>",
  "axes": {{
    "fond": {{
      "justesse": {{
        "note": <int>, "couleur": "<emoji>",
        "justification": "<phrase pr√©cise et concr√®te>",
        "citation": "<<=20 mots>",
        "comparaison": "<r√©f√©rence √† des faits connus ou contexte>"
      }},
      "completude": {{
        "note": <int>, "couleur": "<emoji>",
        "justification": "<phrase concr√®te sur la pluralit√© manquante ou pr√©sente>",
        "citation": "<<=20 mots>",
        "comparaison": "<√©l√©ment contextuel ou manquant>"
      }}
    }},
    "forme": {{
      "ton": {{
        "note": <int>, "couleur": "<emoji>",
        "justification": "<phrase concr√®te sur le ton>",
        "citation": "<<=20 mots>"
      }},
      "sophismes": {{
        "note": <int>, "couleur": "<emoji>",
        "justification": "<phrase claire expliquant le biais>",
        "citation": "<<=20 mots>"
      }}
    }}
  }},
  "commentaire": "<2 phrases max : forces/faiblesses>",
  "resume": "<3 phrases max>",
  "confiance_analyse": <int>,
  "eclairage": {{
    "faits_complementaires": ["<faits publics connus>", "..."],
    "manques_identifies": ["<points cl√©s absents du texte>", "..."],
    "impact_sur_fiabilite": "<phrase claire sur la cons√©quence des manques>"
  }},
  "limites_analyse_ia": ["<texte>", "..."],
  "limites_analyse_contenu": ["<texte>", "..."],
  "recherches_effectuees": ["<r√©sum√© court>", "..."],
  "methode": {{
    "principe": "De Facto √©value un texte selon deux axes : FOND (justesse, compl√©tude) et FORME (ton, sophismes).",
    "criteres": {{
      "fond": "Justesse (v√©racit√©/sources) et compl√©tude (pluralit√©/contre-arguments).",
      "forme": "Ton (neutralit√©) et sophismes (raisonnements fallacieux)."
    }},
    "avertissement": "Analyse bas√©e sur le texte fourni ; pas d‚Äôacc√®s web temps r√©el."
  }}
}}

---

Texte √† analyser :
---
{text}
---
"""

    try:
        signal.alarm(25)

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un analyste textuel rigoureux, concret et p√©dagogue."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4
        )
        signal.alarm(0)

        raw = resp.choices[0].message.content.strip()

        try:
            result = json.loads(raw)
        except json.JSONDecodeError:
            m = re.search(r"\{.*\}", raw, re.DOTALL)
            if not m:
                return jsonify({"error": "R√©ponse GPT non conforme (non JSON)."}), 500
            result = json.loads(m.group(0))

        # Valeurs par d√©faut
        result.setdefault("confiance_analyse", 80)
        result.setdefault("eclairage", {
            "faits_complementaires": [],
            "manques_identifies": [],
            "impact_sur_fiabilite": ""
        })
        result.setdefault("limites_analyse_ia", [])
        result.setdefault("limites_analyse_contenu", [])
        result.setdefault("recherches_effectuees", [])
        result.setdefault("methode", {
            "principe": "De Facto √©value un texte selon FOND (justesse, compl√©tude) et FORME (ton, sophismes).",
            "criteres": {
                "fond": "Justesse (v√©racit√©/sources) et compl√©tude (pluralit√©/contre-arguments).",
                "forme": "Ton (neutralit√©) et sophismes (raisonnements fallacieux)."
            },
            "avertissement": "Analyse bas√©e sur le texte fourni ; pas d‚Äôacc√®s web temps r√©el."
        })

        # Couleurs
        if "score_global" in result:
            result.setdefault("couleur_global", color_for(int(result["score_global"])))
        axes = result.get("axes", {})
        for bloc in ("fond", "forme"):
            if bloc in axes and isinstance(axes[bloc], dict):
                for crit in axes[bloc].values():
                    if isinstance(crit, dict) and "note" in crit:
                        crit.setdefault("couleur", color_for(int(crit["note"])))

        if texte_tronque:
            result["texte_tronque"] = True
            result["limites_analyse_contenu"].append(
                f"Analyse effectu√©e sur un extrait (max {MAX_LEN} caract√®res sur {original_length})."
            )

        return jsonify(result)

    except TimeoutError:
        return jsonify({"error": "Analyse trop longue. R√©essaie avec un texte plus court."}), 500
    except Exception as e:
        print("‚ùå Erreur:", e)
        return jsonify({"error": str(e)}), 500


# ---------------------------
# Serve frontend in dev (Replit)
# ---------------------------
if os.getenv("REPL_ID"):
    @app.route("/")
    def serve_frontend():
        return send_from_directory(os.path.join(os.getcwd(), "frontend"), "index.html")

    @app.route("/<path:path>")
    def serve_static(path):
        frontend_path = os.path.join(os.getcwd(), "frontend")
        file_path = os.path.join(frontend_path, path)
        if os.path.exists(file_path):
            return send_from_directory(frontend_path, path)
        else:
            return send_from_directory(frontend_path, "index.html")


# ---------------------------
# Run app
# ---------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
