# ============================
#  FACTO - BACKEND D'ANALYSE DE TEXTE
#  Version : 1.2 (avec pond√©ration, preuves, limites, logs)
#  Auteur : Anis + ChatGPT
# ============================

from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from datetime import datetime
import os, json, re

# ----------------------------
# 1Ô∏è‚É£  CONFIGURATION DU SERVEUR
# ----------------------------

# Cr√©ation de l‚Äôapplication Flask
app = Flask(__name__)

# Autoriser les requ√™tes cross-origin (depuis ton front HTML ou WeWeb)
CORS(app)

# Initialisation du client OpenAI avec la cl√© d‚ÄôAPI (stock√©e sur Render)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ----------------------------
# 2Ô∏è‚É£  PAGE D‚ÄôACCUEIL
# ----------------------------
@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "message": "Bienvenue sur l‚ÄôAPI du Barom√®tre de Fiabilit√© (Facto).",
        "routes": ["/analyze (POST)"],
        "description": "Envoyez un texte pour obtenir une analyse compl√®te (fond, forme, preuves, limites, etc.)."
    })

# ----------------------------
# 3Ô∏è‚É£  FONCTION PRINCIPALE D‚ÄôANALYSE
# ----------------------------
@app.route("/analyze", methods=["POST", "OPTIONS"])
def analyze():
    # R√©ponse automatique pour les requ√™tes CORS (pr√©-vol)
    if request.method == "OPTIONS":
        return ("", 204)

    # R√©cup√©ration du texte envoy√© par le front
    data = request.get_json(force=True)
    text = data.get("text", "").strip()

    if not text:
        return jsonify({"error": "Aucun texte re√ßu."}), 400

    # V√©rification simple de la longueur du texte
    word_count = len(text.split())
    if word_count < 50:
        return jsonify({
            "error": "Texte trop court pour une analyse fiable (min. 50 mots).",
            "word_count": word_count
        }), 400

    # ----------------------------
    # 4Ô∏è‚É£  PROMPT D‚ÄôANALYSE GPT
    # ----------------------------
    prompt = f"""
    Tu es le moteur d'analyse du Barom√®tre de Fiabilit√© (Facto).
    Ta mission est d'√©valuer la rigueur argumentative et la fiabilit√© d‚Äôun texte √† vis√©e informative.

    ‚ö†Ô∏è Si le texte n‚Äôest pas informatif (opinion, fiction, satire, etc.), indique-le clairement.

    Analyse selon 4 sous-crit√®res :
    - **FOND** :
        ‚Ä¢ Justesse : qualit√© des sources, coh√©rence des faits.
        ‚Ä¢ Compl√©tude : diversit√© des points de vue, nuance, contre-arguments.
    - **FORME** :
        ‚Ä¢ Ton : neutralit√©, charge √©motionnelle.
        ‚Ä¢ Biais : sophismes, g√©n√©ralisations, appel √† l‚Äô√©motion.

    Pour chaque sous-crit√®re, fournis :
    - une note entre 0 et 1,
    - des preuves cit√©es (√©l√©ments factuels du texte),
    - des explications (interpr√©tation, contexte),
    - les √©l√©ments manquants (ce qui affaiblit le raisonnement).

    Ensuite :
    - Calcule un score global sur 100 (pond√©ration : 70 % fond, 30 % forme).
    - Donne une couleur indicative (üü¢ ‚â•70, üü° 40‚Äì69, üî¥ <40).
    - Indique un niveau de confiance (0 √† 1).
    - Indique le type de texte (informatif, opinion, fiction, etc.).
    - Mentionne les limites de l‚Äôanalyse (texte incomplet, ambigu√Øt√©, manque de contexte...).
    - Fournis une impression g√©n√©rale et un conseil de lecture.

    R√©ponds **uniquement en JSON strict**, sans texte autour.

    Format attendu :
    {{
      "pertinence": "<texte>",
      "type_texte": "<informatif | opinion | fiction | autre>",
      "confiance": <float>,
      "score_global": <float>,
      "axes": {{
        "fond": {{
          "justesse": {{
            "note": <float>,
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."],
            "elements_manquants": ["<texte>", "..."]
          }},
          "completuede": {{
            "note": <float>,
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."],
            "elements_manquants": ["<texte>", "..."]
          }}
        }},
        "forme": {{
          "ton": {{
            "note": <float>,
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."]
          }},
          "biais": {{
            "note": <float>,
            "preuves": ["<exemple>", "..."],
            "explications": ["<texte>", "..."]
          }}
        }}
      }},
      "commentaire": "<2 phrases sur les forces et faiblesses>",
      "synthese": "<phrase courte de conclusion>",
      "impression_generale": "<phrase r√©sumant la fiabilit√© per√ßue>",
      "conseil": "<recommandation pour le lecteur>",
      "couleur": "<üü¢ | üü° | üî¥>",
      "limites": ["<texte>", "..."]
    }}

    Texte √† analyser :
    ---
    {text}
    ---
    """

    # ----------------------------
    # 5Ô∏è‚É£  APPEL √Ä L‚ÄôAPI GPT
    # ----------------------------
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # mod√®le rapide et √©conomique
            messages=[
                {"role": "system", "content": "Tu es un moteur d'analyse rigoureux et transparent pour Facto."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3  # faible pour la stabilit√© des r√©sultats
        )

        # Extraction du contenu textuel
        raw_output = response.choices[0].message.content.strip()

        # ----------------------------
        # 6Ô∏è‚É£  VALIDATION ET PARSING DU JSON
        # ----------------------------
        try:
            result = json.loads(raw_output)
        except json.JSONDecodeError:
            # Si GPT renvoie du texte autour du JSON, on extrait proprement
            match = re.search(r"\{.*\}", raw_output, re.DOTALL)
            result = json.loads(match.group(0)) if match else {"error": "JSON invalide"}

        # ----------------------------
        # 7Ô∏è‚É£  POND√âRATION ET CALCUL LOCAL DU SCORE GLOBAL
        # ----------------------------
        try:
            fond = result.get("axes", {}).get("fond", {})
            forme = result.get("axes", {}).get("forme", {})

            fond_score = (
                fond.get("justesse", {}).get("note", 0) +
                fond.get("completuede", {}).get("note", 0)
            ) / 2

            forme_score = (
                forme.get("ton", {}).get("note", 0) +
                forme.get("biais", {}).get("note", 0)
            ) / 2

            score_global = round((fond_score * 0.7 + forme_score * 0.3) * 100, 1)
            result["score_global"] = score_global
        except Exception:
            pass  # en cas d‚Äôerreur, on garde le score GPT

        # ----------------------------
        # 8Ô∏è‚É£  SAUVEGARDE DANS LES LOGS
        # ----------------------------
        try:
            log_entry = {
                "timestamp": datetime.utcnow().isoformat(),
                "texte": text[:2000],  # on limite la taille du texte stock√©
                "word_count": word_count,
                "resultat": result
            }
            with open("logs.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
        except Exception as e:
            print("‚ö†Ô∏è Erreur de sauvegarde des logs :", e)

        # ----------------------------
        # 9Ô∏è‚É£  RETOUR AU FRONT
        # ----------------------------
        return jsonify(result)

    except Exception as e:
        print("‚ùå Erreur GPT :", e)
        return jsonify({"error": str(e)}), 500

# ----------------------------
# üîü SYNTH√àSE DU CODE
# ----------------------------
# Ce backend :
# ‚úÖ Re√ßoit un texte (via POST /analyze)
# ‚úÖ Analyse fond, forme, justesse, ton, biais...
# ‚úÖ Fournit justifications, preuves, √©l√©ments manquants
# ‚úÖ D√©tecte les limites de l‚Äôanalyse et le type de texte
# ‚úÖ Calcule le score global pond√©r√© (70 % fond / 30 % forme)
# ‚úÖ Enregistre l‚Äôanalyse dans logs.json
# ‚úÖ Retourne un JSON complet, structur√© et lisible par ton front
# ----------------------------

# (Aucune ex√©cution locale √† pr√©voir ici : Render lance automatiquement gunicorn server:app)
