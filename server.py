from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os, json, re

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "Bienvenue sur l‚ÄôAPI du Barom√®tre de Fiabilit√© (Facto). Utilisez /analyze pour POSTER votre texte."})

@app.route("/analyze", methods=["POST", "OPTIONS"])
def analyze():
    if request.method == "OPTIONS":
        return ("", 204)

    data = request.get_json(force=True)
    text = data.get("text", "").strip()
    if not text:
        return jsonify({"error": "Aucun texte re√ßu"}), 400

    # --- PROMPT FACTO COMPLET ---
    prompt = f"""
    Tu es le moteur d'analyse du Barom√®tre de Fiabilit√© (Facto).
    Ta mission est d'√©valuer la rigueur argumentative et la fiabilit√© d‚Äôun texte √† vis√©e informative.

    ‚ö†Ô∏è Si le texte n‚Äôest pas informatif (opinion, fiction, satire, etc.),
    indique-le dans "pertinence" et explique pourquoi aucune analyse n‚Äôest possible.
    Sinon, proc√®de √† l‚Äôanalyse compl√®te.

    R√©ponds uniquement en JSON strict, sans texte autour.

    Grille d'analyse :
    - FOND :
      ‚Ä¢ Justesse : qualit√© des sources, solidit√© du raisonnement, coh√©rence des faits
      ‚Ä¢ Compl√©tude : pluralit√© des points de vue, nuance, contre-arguments
    - FORME :
      ‚Ä¢ Ton : neutralit√©, charge √©motionnelle
      ‚Ä¢ Biais : sophismes, g√©n√©ralisations, appel √† l‚Äô√©motion

    Pour chaque sous-crit√®re, fournis :
    - une note entre 0 et 1
    - une justification
    - un exemple concret tir√© du texte

    Calcule un score global sur 100 et attribue une couleur :
      üü¢ si score ‚â• 70
      üü° si 40 ‚â§ score < 70
      üî¥ si score < 40

    Format JSON attendu :
    {{
      "pertinence": "<texte>",
      "score_global": <float entre 0 et 100>,
      "axes": {{
        "fond": {{
          "justesse": {{
            "note": <float>,
            "justification": "<texte>",
            "exemple": "<exemple tir√© du texte>"
          }},
          "completuede": {{
            "note": <float>,
            "justification": "<texte>",
            "exemple": "<exemple tir√© du texte>"
          }}
        }},
        "forme": {{
          "ton": {{
            "note": <float>,
            "justification": "<texte>",
            "exemple": "<exemple tir√© du texte>"
          }},
          "biais": {{
            "note": <float>,
            "justification": "<texte>",
            "exemple": "<exemple tir√© du texte>"
          }}
        }}
      }},
      "commentaire": "<2 phrases expliquant les points forts et faibles>",
      "synthese": "<phrase-synth√®se courte>",
      "couleur": "<üü¢ ou üü° ou üî¥>"
    }}

    Texte √† analyser :
    ---
    {text}
    ---
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un moteur d‚Äôanalyse rigoureuse pour Facto. R√©ponds toujours en JSON strict."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3
        )

        raw_output = response.choices[0].message.content.strip()

        # --- Parsing robuste ---
        try:
            result = json.loads(raw_output)
        except json.JSONDecodeError:
            match = re.search(r"\{.*\}", raw_output, re.DOTALL)
            result = json.loads(match.group(0)) if match else None

        if not result:
            result = {"error": "R√©ponse non exploitable"}

        return jsonify(result)

    except Exception as e:
        print("Erreur GPT:", e)
        return jsonify({"error": str(e)}), 500
